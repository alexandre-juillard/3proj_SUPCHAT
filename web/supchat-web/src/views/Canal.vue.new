<template>
  <div>
    <v-container fluid>
      <v-row>
        <v-col cols="12" md="9">
          <v-card>
            <v-toolbar>
              <v-toolbar-title>
                {{ canal && canal.type === 'prive' ? 'ðŸ”’' : '#' }} {{ canal && canal.nom }}
              </v-toolbar-title>
              <v-spacer></v-spacer>
              <v-btn icon @click="showMembers = true">
                <v-icon>mdi-account-group</v-icon>
              </v-btn>
              <v-btn icon @click="showSettings = true">
                <v-icon>mdi-cog</v-icon>
              </v-btn>
            </v-toolbar>

            <v-card-text class="messages-container" ref="messagesContainer">
              <div v-if="loading" class="text-center">
                <v-progress-circular indeterminate color="primary"></v-progress-circular>
              </div>
              <template v-else>
                <div v-if="!messages || messages.length === 0" class="text-center py-4">
                  Aucun message dans ce canal
                </div>
                <v-list v-else class="messages-list">
                  <div v-if="hasMoreMessages" class="text-center py-2 mb-2">
                    <v-btn text color="primary" @click="loadMoreMessages" :disabled="loadingMore">
                      Afficher plus de messages
                      <v-progress-circular v-if="loadingMore" indeterminate size="16" width="2" class="ml-2"></v-progress-circular>
                    </v-btn>
                  </div>
                  
                  <v-list-item v-for="message in visibleMessages" :key="message._id">
                    <v-list-item-content>
                      <v-list-item-title class="d-flex align-center">
                        <span class="font-weight-bold">{{ message.auteur ? message.auteur.username : 'Utilisateur' }}</span>
                        <v-chip x-small class="ml-2" v-if="message.modifie">modifiÃ©</v-chip>
                        <v-spacer></v-spacer>
                        <span class="text-caption">{{ formatDate(message.createdAt) }}</span>
                      </v-list-item-title>
                      
                      <div v-if="message.reponseA" class="reply-reference mb-1 pa-2">
                        <div class="d-flex align-center">
                          <v-icon small class="mr-1">mdi-reply</v-icon>
                          <span class="text-caption font-weight-medium">RÃ©ponse Ã  {{ message.reponseA.auteur ? message.reponseA.auteur.username : 'Utilisateur' }}</span>
                        </div>
                        <div class="text-caption grey--text text--darken-1 text-truncate reply-preview">
                          {{ message.reponseA.contenu }}
                        </div>
                      </div>
                      
                      <v-list-item-subtitle>
                        {{ message.contenu }}
                      </v-list-item-subtitle>
                    </v-list-item-content>
                  </v-list-item>
                </v-list>
              </template>
            </v-card-text>

            <v-card-actions>
              <v-text-field
                v-model="contenuMessage"
                placeholder="Ã‰crivez votre message..."
                append-icon="mdi-send"
                @click:append="envoyerMessage"
                @keydown.enter="envoyerMessage"
                hide-details
                dense
                outlined
                class="message-input"
              ></v-text-field>
            </v-card-actions>
          </v-card>
        </v-col>
      </v-row>
    </v-container>
  </div>
</template>

<script>
import { defineComponent, ref, computed, watch, onMounted, onUnmounted } from 'vue'
import { useRoute, useRouter } from 'vue-router'
import { useStore } from 'vuex'
import socketService from '../services/socketService'
import axios from 'axios'

// URL de l'API
const API_URL = process.env.VUE_APP_API_URL || 'http://localhost:3000';

export default defineComponent({
  name: 'CanalView',
  
  setup() {
    const route = useRoute()
    const router = useRouter()
    const store = useStore()
    
    const messagesContainer = ref(null)
    const showMembers = ref(false)
    const showSettings = ref(false)
    const loading = ref(true)
    const sending = ref(false)
    const contenuMessage = ref('')
    
    // Variables pour la pagination et le rendu par lots
    const messagesPerPage = ref(20) // Nombre de messages Ã  afficher par page
    const currentPage = ref(1) // Page actuelle
    const loadingMore = ref(false) // Indicateur de chargement lors du clic sur "Afficher plus"
    const hasMoreMessages = ref(false) // Indique s'il y a plus de messages Ã  charger

    const workspaceId = computed(() => route.params.workspaceId)
    const canalId = computed(() => route.params.canalId)
    const canal = computed(() => store.state.canal.canalActif)
    const messages = computed(() => store.getters['message/allMessages'])
    const user = computed(() => store.state.auth.user)

    const messagesInOrder = computed(() => {
      // VÃ©rification de sÃ©curitÃ© pour Ã©viter les erreurs
      if (!messages.value || !Array.isArray(messages.value)) return [];
      
      try {
        // CrÃ©er un nouveau tableau pour ne pas modifier le tableau original
        const messagesCopy = [...messages.value];
        
        // Utiliser une mÃ©thode de tri optimisÃ©e avec des timestamps numÃ©riques
        return messagesCopy.sort((a, b) => {
          // Convertir les dates en timestamps numÃ©riques une seule fois
          const dateA = a.createdAt ? new Date(a.createdAt).getTime() : 0;
          const dateB = b.createdAt ? new Date(b.createdAt).getTime() : 0;
          return dateB - dateA; // Ordre dÃ©croissant (plus rÃ©cent d'abord)
        });
      } catch (error) {
        console.error('Erreur lors du tri des messages:', error);
        return [...messages.value]; // Retourner une copie en cas d'erreur
      }
    })

    // PropriÃ©tÃ© calculÃ©e pour vÃ©rifier s'il y a plus de messages Ã  charger
    const hasMoreMessagesComputed = computed(() => {
      if (!messagesInOrder.value) return false;
      return messagesInOrder.value.length > messagesPerPage.value * currentPage.value;
    });
    
    // Mettre Ã  jour hasMoreMessages lorsque hasMoreMessagesComputed change
    watch(hasMoreMessagesComputed, (newValue) => {
      hasMoreMessages.value = newValue;
    }, { immediate: true });
    
    // PropriÃ©tÃ© calculÃ©e pour obtenir uniquement les messages visibles selon la pagination
    const visibleMessages = computed(() => {
      const allMessages = messagesInOrder.value;
      if (!allMessages) return [];
      
      // Retourner les N messages les plus rÃ©cents en fonction de la page actuelle
      // (limitÃ© par messagesPerPage * currentPage)
      return allMessages.slice(0, messagesPerPage.value * currentPage.value);
    })

    const loadMoreMessages = () => {
      loadingMore.value = true;
      
      // Simuler un dÃ©lai pour montrer l'indicateur de chargement
      setTimeout(() => {
        currentPage.value++;
        loadingMore.value = false;
      }, 500);
    };

    const formatDate = (dateString) => {
      if (!dateString) return '';
      
      const date = new Date(dateString);
      const now = new Date();
      
      // Si c'est aujourd'hui, afficher l'heure
      if (date.toDateString() === now.toDateString()) {
        return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
      }
      
      // Si c'est hier, afficher "Hier" et l'heure
      const yesterday = new Date(now);
      yesterday.setDate(now.getDate() - 1);
      if (date.toDateString() === yesterday.toDateString()) {
        return `Hier ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;
      }
      
      // Sinon, afficher la date complÃ¨te
      return date.toLocaleDateString() + ' ' + date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    };

    const scrollToBottom = () => {
      if (messagesContainer.value) {
        messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight;
      }
    };

    const envoyerMessage = async () => {
      if (!contenuMessage.value.trim()) return;
      
      sending.value = true;
      
      try {
        await store.dispatch('message/sendMessage', {
          canalId: canalId.value,
          contenu: contenuMessage.value,
          workspaceId: workspaceId.value
        });
        
        contenuMessage.value = '';
        scrollToBottom();
      } catch (error) {
        console.error('Erreur lors de l\'envoi du message:', error);
      } finally {
        sending.value = false;
      }
    };

    const loadMessages = async () => {
      try {
        await store.dispatch('message/fetchMessages', {
          canalId: canalId.value,
          workspaceId: workspaceId.value
        });
        scrollToBottom();
      } catch (error) {
        console.error('Erreur lors du chargement des messages:', error);
      }
    };

    onMounted(async () => {
      try {
        if (canalId.value) {
          // Charger les dÃ©tails du canal
          await store.dispatch('canal/fetchCanal', {
            canalId: canalId.value,
            workspaceId: workspaceId.value
          });
          
          // Charger les messages
          await loadMessages();
          loading.value = false;
          scrollToBottom();
        }
      } catch (error) {
        console.error('Erreur lors de l\'initialisation:', error);
        loading.value = false;
      }
    });

    // Surveiller les changements de canal pour recharger les messages
    watch(() => canalId.value, async (newCanalId, oldCanalId) => {
      if (newCanalId && newCanalId !== oldCanalId) {
        loading.value = true;
        try {
          // Charger les dÃ©tails du canal
          await store.dispatch('canal/fetchCanal', {
            canalId: newCanalId,
            workspaceId: workspaceId.value
          });
          
          // Charger les messages
          await loadMessages();
          loading.value = false;
          scrollToBottom();
        } catch (error) {
          console.error('Erreur chargement canal:', error);
          loading.value = false;
        }
      }
    });

    onUnmounted(() => {
      socketService.disconnect();
    });

    return {
      showMembers,
      showSettings,
      loading,
      sending,
      contenuMessage,
      messagesPerPage,
      currentPage,
      loadingMore,
      hasMoreMessages,
      visibleMessages,
      loadMoreMessages,
      canal,
      messages,
      messagesInOrder,
      user,
      messagesContainer,
      formatDate,
      envoyerMessage,
      scrollToBottom
    };
  }
});
</script>

<style scoped>
.messages-container {
  height: calc(100vh - 300px);
  overflow-y: auto;
}

.messages-list {
  display: flex;
  flex-direction: column;
}

.message-input {
  width: 100%;
}

.reply-reference {
  background-color: rgba(0, 0, 0, 0.05);
  border-left: 3px solid #1976d2;
  border-radius: 4px;
  margin-left: 4px;
}

.reply-preview {
  max-width: 250px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}
</style>
